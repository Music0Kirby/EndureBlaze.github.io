<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[动态替换 ViewPager 里面的 Fragment]]></title>
    <url>%2Fposts%2F6b0c894%2F</url>
    <content type="text"><![CDATA[最近在重写 Kirby Assistant 过程中又遇到了需要动态替换 ViewPager 的某个 Fragment 的需求，因为之前的是直接在同一个布局里暴力替换的，但是这次因为是用其他方法实现的，当然不能用以前的方法了，摸索了一段时间后终于搞定了，现在把可以用的方法放在下面 1. 准备过程首先需要在布局中添加 ViewPager 1234&lt;androidx.viewpager.widget.ViewPager android:id="@+id/main_fragment_viewpager" android:layout_width="match_parent" android:layout_height="match_parent"/&gt; 然后给 ViewPager 写一个 ViewPagerAdapter 并且继承自 FragmentPagerAdapter 123public class ViewPagerAdapter extends FragmentPagerAdapter &#123;//其他东西&#125; 2. 重写 ViewPagerAdapter具体看代码的注释，有注释的都是需要注意的 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778public class ViewPagerAdapter extends FragmentPagerAdapter &#123; private FragmentManager fm; private List&lt;Fragment&gt; fragments; private List&lt;String&gt; page_title;//这个是对应碎片的标题，可以不需要 public ViewPagerAdapter(FragmentManager fm, List&lt;Fragment&gt; fragments,List&lt;String&gt; page_title) &#123; super(fm); this.fm=fm; this.fragments=fragments; this.page_title=page_title; &#125; //注意这个方法，这个是配置你在哪个碎片上进行替换 @NonNull @Override public Object instantiateItem(@NonNull ViewGroup container, int position) &#123; //这里的判断说明的是在三个和第四个碎片上替换 if (position == 2||position == 3) removeFragment(container,position); return super.instantiateItem(container, position); &#125; //这个方法就是通过 Tag 来判断碎片是不是原来的，如果不是就进行替换 private void removeFragment(ViewGroup container,int index) &#123; String tag = getFragmentTag(container.getId(), index); Fragment fragment = fm.findFragmentByTag(tag); if (fragment == null) return; FragmentTransaction ft = fm.beginTransaction(); ft.remove(fragment); ft.commit(); ft = null; fm.executePendingTransactions(); &#125; @NonNull @Override public Fragment getItem(int position) &#123; return fragments.get(position); &#125; @Override public int getCount() &#123; return fragments.size(); &#125; //注意写成这样才可以进行刷新 @Override public int getItemPosition(@NonNull Object object) &#123; return PagerAdapter.POSITION_NONE; &#125; @Override public CharSequence getPageTitle(int position) &#123; return page_title.get(position); &#125; //禁止销毁view达到复用 @Override public void destroyItem(@NonNull ViewGroup container, int position, @NonNull Object object) &#123;&#125; //获取碎片的tag private String getFragmentTag(int viewId, int index) &#123; try &#123; Class&lt;FragmentPagerAdapter&gt; cls = FragmentPagerAdapter.class; Class&lt;?&gt;[] parameterTypes = &#123; int.class, long.class &#125;; Method method = cls.getDeclaredMethod("makeFragmentName", parameterTypes); method.setAccessible(true); String tag = (String) method.invoke(this, viewId, index); return tag; &#125; catch (Exception e) &#123; e.printStackTrace(); return ""; &#125; &#125;&#125; 3. 注意问题如果出现替换后出现某个碎片的布局空白了，那就设置一个 ViewPager 的缓存属性 1main_fragment_viewpager.setOffscreenPageLimit(4);//4代表缓存4页，根据实际情况调整 4. 结尾如果有代码什么问题可以向我提出]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>踩坑</tag>
        <tag>ViewPager</tag>
        <tag>Fragment</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实现滑动隐藏 ToolBar 与 BottomNavigation]]></title>
    <url>%2Fposts%2F919199f6%2F</url>
    <content type="text"><![CDATA[最近在重写 Kirby Assistant 的时候需要实现像图中的效果，那这样的效果具体应该怎么实现呢，快点进来看看吧。(图在里面) (这里有图，Github 可能速度比较慢) 1. 准备过程首先这样的效果都是基CoordinatorLayout来实现的，所以先在app模块下添加如下依赖 1implementation 'androidx.coordinatorlayout:coordinatorlayout:1.1.0-beta01'//版本可能不是最新，根据自身情况选择新版 然后将需要实现这个效果界面的布局最顶层的布局替换为CoordinatorLayout即 123456789&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent" android:layout_height="match_parent"&gt;&lt;!--可能会有其他的组件--&gt;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt; 到此，准备过程就完成了 2. 实现隐藏 Toolbar首先在上面的基础上需要添加 Toolbar 组件，如 1234567891011121314151617181920212223242526272829&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;com.google.android.material.appbar.AppBarLayout android:layout_width="match_parent" android:layout_height="wrap_content" android:id="@+id/mainAppBarLayout"&gt; &lt;androidx.appcompat.widget.Toolbar android:id="@+id/toolbar" android:layout_height="?attr/actionBarSize" android:layout_width="match_parent" android:background="?attr/colorPrimary" android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar" android:elevation="4dp" app:popupTheme="@style/ThemeOverlay.AppCompat.Light" app:layout_scrollFlags="scroll|enterAlways|snap"&gt; &lt;!--上面这行重点--&gt; &lt;/androidx.appcompat.widget.Toolbar&gt; &lt;/com.google.android.material.appbar.AppBarLayout&gt; &lt;!--可能会有其他的组件--&gt; &lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt; 那么这里需要说明一下app:layout_scrollFlags=&quot;scroll|enterAlways|snap&quot;是什么意思，这个实际上是用来控制 AppBarLayout 内部组件的行为。 其中,scroll表示当界面向上滚动的时候, Toolbar会跟着一起向上滚动并实现隐藏。 enterAlways表示当界面向下滚动的时候, Toolbar会跟着一起向下滚动并重新显示。 snap表示当 Toolbar还没有完全隐藏或显示的时候,会根据当前滚动的距离,自动选择是隐藏还是显示。 当然还有其他参数，但是比较少用 接着添加另外一个组件，例如 RecyclerView 123456789101112131415161718&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;!--AppBarLayout相关组件--&gt; &lt;androidx.recyclerview.widget.RecyclerView android:id="@+id/main_rlv" android:layout_width="match_parent" android:layout_height="match_parent" app:layout_behavior="@string/appbar_scrolling_view_behavior"/&gt; &lt;!--重点--&gt; &lt;!--可能会有其他的组件--&gt; &lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt; 可以看到这里指定了一个app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;那么这个属性实际上是谷歌封装好的一个 Behavior，已经完成了 Toolbar 隐藏所有动画效果。 3. 实现隐藏 BottomNavigationBottomNavigation 的话，谷歌没有进行封装，需要我们自己实现，那么先在布局添加 BottomNavigation 组件 123456789101112131415161718192021&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;!--AppBarLayout相关组件--&gt; &lt;!--RecyclerView组件--&gt; &lt;com.google.android.material.bottomnavigation.BottomNavigationView android:id="@+id/main_bottom_navigation_bar" android:layout_width="match_parent" android:layout_height="?attr/actionBarSize" android:layout_gravity="bottom" android:background="?android:attr/windowBackground" android:elevation="8dp" app:layout_behavior="cn.endureblaze.kirby.main.BottomNavigationBehavior" app:menu="@menu/main_bottom_navigation_menu" app:labelVisibilityMode="labeled"/&gt; &lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt; 那么可以看到这里指定了一个app:layout_behavior=&quot;cn.endureblaze.kirby.main.BottomNavigationBehavior&quot;这实际上是指定了一个自定义 behavior，数值需要填上绝对路径 那么来看看 BottomNavigationBehavior 是怎么写的吧 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126public class BottomNavigationBehavior&lt;V extends View&gt; extends CoordinatorLayout.Behavior&lt;V&gt; &#123; private int lastStartedType; private ValueAnimator offsetAnimator; private boolean isSnappingEnabled = true; public BottomNavigationBehavior (Context context, AttributeSet attrs) &#123; super(context, attrs); &#125; public BottomNavigationBehavior () &#123; super(); &#125; public void setSnappingEnabled(boolean isEnabled) &#123; isSnappingEnabled = isEnabled; lastStartedType = 0; if (offsetAnimator != null) &#123; offsetAnimator.cancel(); offsetAnimator = null; &#125; &#125; public void expand(CoordinatorLayout coordinatorLayout, V child) &#123; int[] consumed = new int[2]; boolean curIsSnappingEnabled = isSnappingEnabled; if(curIsSnappingEnabled) &#123; setSnappingEnabled(false); &#125; onNestedPreScroll(coordinatorLayout, child, null, 0, -1000, consumed, ViewCompat.TYPE_TOUCH); if(curIsSnappingEnabled) &#123; setSnappingEnabled(true); &#125; &#125; @Override public boolean onStartNestedScroll(@NonNull CoordinatorLayout coordinatorLayout, @NonNull V child, @NonNull View directTargetChild, @NonNull View target, int axes, int type) &#123; if (axes != ViewCompat.SCROLL_AXIS_VERTICAL) return false; lastStartedType = type; if(offsetAnimator!= null) &#123; offsetAnimator.cancel(); &#125; return true; &#125; @Override public void onStopNestedScroll(@NonNull CoordinatorLayout coordinatorLayout, @NonNull V child, @NonNull View target, int type) &#123; if (!isSnappingEnabled) return ; // 添加一个 snap behaviour // 这里的逻辑借用了 AppBarLayout onStopNestedScroll 相关代码 if (lastStartedType == ViewCompat.TYPE_TOUCH || type == ViewCompat.TYPE_NON_TOUCH) &#123; // find nearest seam float currTranslation = child.getTranslationY(); float childHalfHeight = child.getHeight() * 0.5f; if (currTranslation &gt;= childHalfHeight) &#123; animateBarVisibility(child, false); // 向下 &#125; else &#123; animateBarVisibility(child, true); //向上 &#125; &#125; &#125; @Override public void onNestedPreScroll (@NonNull CoordinatorLayout coordinatorLayout, @NonNull V child, View target, int dx, int dy, @NonNull int[] consumed, int type) &#123; super.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed, type); child.setTranslationY(Math.max(0f, Math.min(child.getHeight(), child.getTranslationY() + dy))); &#125; @Override public boolean layoutDependsOn(@NonNull CoordinatorLayout parent, @NonNull V child, @NonNull View dependency) &#123; if(dependency instanceof Snackbar.SnackbarLayout) &#123; updateSnackBar(child, (Snackbar.SnackbarLayout)dependency); &#125; return super.layoutDependsOn(parent, child, dependency); &#125; private void updateSnackBar(View child, Snackbar.SnackbarLayout snackBarLayout) &#123; if(snackBarLayout.getLayoutParams() instanceof CoordinatorLayout.LayoutParams) &#123; CoordinatorLayout.LayoutParams params = (CoordinatorLayout.LayoutParams)snackBarLayout.getLayoutParams(); params.setAnchorId(child.getId()); params.anchorGravity = Gravity.TOP; params.gravity = Gravity.TOP; snackBarLayout.setLayoutParams(params); &#125; &#125; private void animateBarVisibility(final View child, boolean isVisible) &#123; if (offsetAnimator == null) &#123; offsetAnimator = new ValueAnimator(); offsetAnimator.setInterpolator(new DecelerateInterpolator()); offsetAnimator.setDuration(150L); offsetAnimator.addUpdateListener(animation -&gt; child.setTranslationY((float)animation.getAnimatedValue())); &#125; else &#123; offsetAnimator.cancel(); &#125; float targetTranslation = isVisible ? 0f : child.getHeight(); offsetAnimator.setFloatValues(child.getTranslationY(), targetTranslation); offsetAnimator.start(); &#125;&#125; 那么这个 behavior 不仅实现了 BottomNavigation 的西东隐藏，而且添加了 snap 效果，并且整合了 snackbar 与 BottomNavigation 之间的关系，这样就不会重叠了 snap 效果可以通过private boolean isSnappingEnabled = true//false是关闭;来控制 4. FloatingActionButton 呢？上面的这些都是忽略了 FAB 的情况下，那么 FAB 应该如何实现呢？当然也是靠自定义 behavior 不过稍稍有点不同，一起来看看吧 首先添加布局 12345678910111213141516171819202122232425&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;!--AppBarLayout相关组件--&gt; &lt;!--RecyclerView组件--&gt; &lt;!--BottomNavigationView组件--&gt;&lt;com.google.android.material.floatingactionbutton.FloatingActionButton android:id="@+id/fab_main" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_gravity="top" app:layout_anchor="@id/main_bottom_navigation_bar" app:layout_anchorGravity="top|end" app:useCompatPadding="true" app:layout_behavior="cn.endureblaze.kirby.main.BottomNavigationFABBehavior" app:fabSize="normal" app:layout_scrollFlags="scroll|enterAlways"/&gt; &lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt; 这里有几个属性需要注意一下 123app:layout_anchor="@id/main_bottom_navigation_bar"app:layout_anchorGravity="top|end"app:layout_behavior="cn.endureblaze.kirby.main.BottomNavigationFABBehavior" layout_anchor 是用来指定一个 FAB 的锚点，即以哪个控件为参照点设置位置layout_anchorGravity 设置 FAB 相对锚点的位置，值有 bottom、center、right、left、top等layout_behavior 依然是设置自定义 behavior，不再赘述 现在看看 BottomNavigationFABBehavior 有什么内容吧 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647public class BottomNavigationFABBehavior&lt;V extends View&gt; extends CoordinatorLayout.Behavior&lt;V&gt; &#123; public BottomNavigationFABBehavior (Context context, AttributeSet attrs) &#123; super(context, attrs); &#125; public BottomNavigationFABBehavior () &#123; super(); &#125; @Override public void onDependentViewRemoved(@NonNull CoordinatorLayout parent, @NonNull V child, @NonNull View dependency) &#123; child.setTranslationY(0f); &#125; @Override public boolean onDependentViewChanged(@NonNull CoordinatorLayout parent, @NonNull V child, @NonNull View dependency) &#123; return updateButton(child, dependency); &#125; @Override public boolean layoutDependsOn(@NonNull CoordinatorLayout parent, @NonNull V child, @NonNull View dependency) &#123; return dependency instanceof Snackbar.SnackbarLayout; &#125; private void updateSnackBar(View child, Snackbar.SnackbarLayout snackBarLayout) &#123; if(snackBarLayout.getLayoutParams() instanceof CoordinatorLayout.LayoutParams) &#123; CoordinatorLayout.LayoutParams params = (CoordinatorLayout.LayoutParams)snackBarLayout.getLayoutParams(); params.setAnchorId(child.getId()); params.anchorGravity = Gravity.TOP; params.gravity = Gravity.TOP; snackBarLayout.setLayoutParams(params); &#125; &#125; private boolean updateButton(View child,View dependency)&#123; if(dependency instanceof Snackbar.SnackbarLayout)&#123; float oldTranslation = child.getTranslationY(); float height = dependency.getHeight(); float newTranslation = dependency.getTranslationY() - height; child.setTranslationY(newTranslation); return oldTranslation != newTranslation; &#125; return false; &#125;&#125; 可以看到还是比较简单的，主要是实现了与底栏的交互还有 snackbar 的交互 5. 结尾那这个实现是我参考了其他的博文以及 Github 的一些项目总结出来的，如果那里有问题还请指出]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Material Design 2</tag>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kirby Assistant 编年史]]></title>
    <url>%2Fposts%2Fa505f9a9%2F</url>
    <content type="text"><![CDATA[写在前面：由于很多东西已经无法考证其实就是懒，当初没记下来，所以早期的版本可能会有记不清版本号的情况，不过大概还是能对的上时间的。 1. 开局一段话，内容全靠编 大家好，众所不那么周知 Kirby Assistant 是一款可以下载星之卡比系列游戏的软件，第一个有意义的版本诞生于 2017年1月15日 我钦定的。那这过去的时间里究竟发过什么有趣的事？或者说是怎么发展的？那接着往下看吧！电脑用户可以用过左边的栏目快速定位，手机用户，对不住啦 2.源自想法 任何 APP 的诞生都应当有一些这样那样的理由，Kirby Assistant 也不例外。老用户可能知道这款程序最早的名字是 Kirby Download 的，那他又是怎么诞生的呢？这还要从 wwylele 说起。当时他在 星之卡比吧 里编写一款可以编辑 星之卡比:梦之泉物语 DX 的地图编辑器，其中一楼发的图中背景是ide，里面的是编辑器源码，前景是编辑器本体，然后楼中楼里有人说“看源码”之类的话。当时我内心就：exm？还有这种操作吗？太炫酷了，这就算是我想学习编程的起源了。 再后来就是接手吧盘的事了，具体时间已经无从考证，因为wwylele已经删除了原贴，但是根据为啥置顶的资源被删了这帖的发布时间 2016-11-27 ，以及我发的发布，肯德基豪华午餐(雾 kirby download发布(2016-11-05)以及我个人看法！？以及水一帖！？(2016-11-29)这两贴的时间来看，最早在 2016-11-05 时我已经接手了贴吧并且有了 Kirby Download 初代版本，所以姑且推算在 2016-11 前我接手了吧盘吧。 那接手了，可不能只是简单的吧资源放在我名下就完事了。如果有的人嫌访问吧盘麻烦怎么办？如果有的人不能迅速找不到想要的资源怎么办？如果有的人记不住地址怎么办？亡命三连 那可不得了，这得赶紧搞个东西出来方便一下。脑子里突然闪过当年种下的草，正好最近有看到 iapp，这个可以快速编写程序，那就搞呗？ 3. 未发布的初代 绝唱 iapp3.1 从零开坑 搞！说的轻巧，那得有好的构思啊。那怎么做？怎么设计？卡片？不行，效率太低，那就……列表？诶，这个绝妙，可以快速定位。用之前下载的 iapp 教程就这样动手起来，十分简单，甚至不用动手编写，只需要拖动就可以了。这可让我第一次尝试就尝到了甜头，顺顺利利的就做了几个列表出来。 3.2 无力吐槽的图标 列表是有了，那……图标？既然这是关于 星之卡比 的程序，那就用一张官方的图，后面再用 PS Touch 做一个背景上去，就是下面这个 wd?这也太丑了吧？你看这色彩，这布局，这裁剪，丑到家了。不过当时可没有人来帮我做设计，就现先这样用吧。 图标有了，凑合能用的程序也有了，那叫什么名字呢？这是关于 星之卡比 的程序，可以用来下资源，你可能认为理所当然的叫 卡比下载器？不不不，根据母语羞涩原理当然是叫 Kirby Download 啦！ 3.2 这就算……开始了吧 然后我就带着这个样子的程序去贴吧发帖了当然因为傻逼百度这贴已经找不到了~对了，图标我换了，长这样~而且当时还做了个视频辣眼睛注意~~ 4. 虽然不好用 但 你好 AndroLua 你好 Kirby Download4.1 初识 AndroLua 时间一天天过着，初代版本也在不断更新虽然没更新多久。可是 iapp 只能拖动的布局已经不能满足我了，我需要更好用的语言，更好用的 ide。迫于当时觉得 java 入门门槛过于高，正好 AndroLua 又在盛行，我也就选择使用这个来接着编写了。这是一个由 nirenr 一个人改编的，基于 lua 语言，但是有一些 java 语法成分的解释型语言。我估计就是因为太好用，太方便才会有人用的。不过成也方便，败也方便。(指弱类型) 4.2 崭新的 Kirby Download 那用了新的语言，怎么能不重新设计界面呢，首先就是界面大改当然这是测试版界面 新的图标，一定要极简，本文设计，质感设计都要有，于是就有了下面这样 这样，Kirby Download钦定的诞生日就有了 2019-1-15 4.3 完整的资源 因为还有学业，所以不能做到日更，所以在周更和双周更的情况下终于在 2017-03-25 收录了绝大部分资源，此时应用界面已经比较现代了并且傻逼一样的给应用名末尾加了个β 可以说，这个主页列表界面基本上维持到 Lua 版本结束 并且在此之前使用了fir托管软件，地址：https://fir.im/kirby 4.4 跨越 版本 1.01.0算是已经接近 Lua版本的尾声了，此时发布了一个对今后影响十分巨大的主页界面而且在此之前更换了新的图标，不过这个图标没有持续很久使用但是这个版本bug居多，很多人反映无法使用，所以我很快迭代了 4.4 震惊 KD 惨遭被盗哈哈哈这个应该是个人开发者必经的，总是会被二次打包的，不过我倒是没有特别在意，只是在贴吧发了这个帖子而已 4.5 虚假的官网在上面那些事情的某个期间，我去一个模板网站制作了一个官网其实就是改改图片，改改文本而已 4.6 停止支持不是停止 KD，而是停止版本支持，就在 2017-05-05 这一天发的kirby download Δ中 5. 你好 java5.1 为什么其实 AndrodLua 挺好用的，那么我为什么要换呢？ 扩展性 是的 AndrodLua 的扩展性十分糟糕，以至于很多新的特性无法使用，在这种情况下我毅然选择了 java。 5.2 停更 但不是永远 在使用 java 编写的时候我不得不停止更新 Lua 版本的 KD，不过没有持续很久。不得不说 java 是安卓开发的主流，我遇到的很多问题都可以得到有效解决，这种前所未有的有效，让我在不到两个月的时间里就搞定了 java 版本的开发。 5.3 手滑的重要性（雾在 2017-06-20 这天发售了手滑铁卢事件，不过吧，这个时候我已经准备 java 版本的开发了，所以丢失的 Lua 版本源码也无伤大碍个屁参阅咳咳，我告诉你们啊。。。 5.4 来了来了 他来了2017-08-14 这天算是正式发布了 KD 的 java 版吧，于是乎就有了我又来炒冷饭了，虫♤人一口 虫♤人一口标题暴力，暗示那位大人偷走了我停更的时间咳咳咳界面如下同时这个图标也是从 Lua 版一直用到 java 版 5.5 V2？集合体？slogan？2018？5.2.1 永不弃坑 就是我除非我亏的没钱了【绝不弃坑】【游戏资源看这里】kirby download这个就是集合了一些链接，当时百度傻逼的审核机制还没有那么严格，这种帖子放现在肯定gg 5.2.2 不仅有游戏是的，这是从那时确定下来的 slogan 现在看来确实如此 5.6 什么什么？用户系统？闲聊？模拟器直接下？2017-8-23 也就是 java 版本发布后，更新了一个让我亏钱至今，甚至濒临几次倒闭的东西，用户系统与文件服务。确实很好用，比看评论区方便多了。就是……不能回复，至今也不行好尴尬啊 5.7 3.0预告5.7.1 真实手绘手绘预告，见过没？【技术】kirby download3.0预告就是这么秀，纯手绘，画出3.0的大部分想法原稿已丢失 5.7.2 除夕夜发布此时 KD 界面已经是很接近现在的了，具体如图以及，真就除夕夜发布正好一周年，蛮有意义的【预热】kirby download3.0，除夕夜发布！！【深夜更新】kirby download3.0 啊，大家好啊这里炎忍，经过两个月的开发，迎来了3.0版本，接下来是更新日志:duang~深夜更新1.新的图标，新的宣传图2.新的菜单3.攻略视频添加4.稳定服务器5.闲聊优化6.全局滑动返回7.优化捐赠8.优化翻译，修复错误翻译9.修改整体算法10.重新设计启动界面11.针对于安卓7.1.2进行优化12.针对于虚拟按键进行优化13.针对于安卓4.4.4进行优化14.压缩体积，提升性能15.进一步优化用户算法…….更多优化，更新，请进入app感受吧！！ 以上的当时的更新日志，也是发帖内容。 6. 再见 Kirby Download6.1 事件3.0更新两天后，由于一些现在不方便描述的的原因因为是QQ上发生的事，所以不多做描述。大概就是我被喷了，还是圈内人，然后我又玩玻璃心说实话真的受不住，就这么僵持了几天，我下架了 Kirby Assistant。2019-2-25 我进行了 Kirby Assistant仓库的最后一次提交，Commit 信息是 “再见Kirby download”，这个仓库的 commits 也定格在 53，不再更新 6.2 反思这个事情过后我也反思自己，也确实做的不够好，如果做的很好，就不会引来别人的这种说法，这么想着，我在QQ空间发了如下说说也算是预告吧 7. 崭新的 你好 Kirby Assistant7.1 从头来过2019-2-27 我在贴吧发帖【资源】Kirby Assistant,这个界面基本定格至今了 7.2 新的特性感谢 AIDE 的更新，让我可以用到诸如自适应图标的新特性，并且在 0.4-beta-1 成功完美适配 AndroidP 这也是截止发文为止最新的 Android 正式版 7.2 撇弃旧框架分别在 0.4-beta-3 、 0.4-beta-6 和 0.4 版中撇弃了旧版本的条条框框，这也是成长最快的时期 7.3 新的图标这是分别在 0.4-beta1和 0.4-beta2的图标，直到目前我也是最喜欢的两个，后面做成了双图标模式 8. 未来·炫动现在，撇弃百度贴吧与QQ，舞台交给 Github 8.1 全新的 KA2018-12-9 我推出了全新版本的 KA ——未来·炫动，这个版本拥有诸多特性，完整的 AndroidP API，完整的自适应图标，双镜像仓库，以及最重要的新服务器结构虽然后面还让我丢数据了如果说 0.4 大版本是 KA 发展最快的时期，那未来·炫动一定是我最推荐的版本 8.2 更新1.2.6(Build 29)引入的更新一定是最刚需的，往往程序更新了却不知道，这次，他来了，引入 Build 比较概念，让你随时都能用上新版本 8.3 全新架构 PBL如果说更新是刚需，让你享受新特性，那么1.2.1(Build 24)引入的全新服务器架构和 PBL一定是更稳定的前提。前者拥有更快的响应速度，后者不会对用户有任何影响，但是会让我维护更方便这不是你丢失服务器数据的理由 8.3 无延迟启动1.2(Build 23)引入的全新启动模式，根据 AndoidP API 编写，适配新特性，毫秒级启动速度 8.4 全新网站这不是程序更新的范畴，但是息息相关2019-2-15 这天我买了域名https://endureblaze.cn并且把 Kirby Assistant 的官网定为https://ka.endureblaze.cn 8.5 更全新的图标在 1.2.7 版本我合并了两个图标并且 hk流星 进行了微调这也是到目前为止一直使用的图标 8.6 AndroidX MD2 以及 更小的体积我购买了电脑，这让我可以跟方便的编写程序，更是把 Kirby Assistant 的体积压缩到更小 9. 炫动了 未来呢？我想，我会一直保持不定期更新，这个程序我暂时不可能放弃的，即使再亏钱 10. 未完待续革命尚未完成，同志仍需努力 10.1 我还想说Kirby Assistant 发展两年多来，实数不易，这让我也了解到生活的不易。是啊，谁都不好过，所以，希望以后还能多多下载，推荐给你身边玩星之卡比的人，或者，带Ta入坑 感谢名单 这是在 Kirby Assistant 发展道路上帮助过我的人，如果有疏漏，请联系我补充 排名无先后之分点击名字可以跳转链接(如果有) 感谢在这个过程中所有给予我鼓励的人 感谢每一个捐赠者 感谢longxk2017(Github)进行繁体中文翻译 感谢hk流星(酷安)进行图标绘制 感谢Markuss(酷安)进行图标绘制 感谢光之耀西(百度贴吧)进行英文翻译 感谢难难难550(百度贴吧)进行英文翻译 感谢蝙蝠侠骑摩托车(百度贴吧)的资源投放 感谢★☆小伊布☆★(百度贴吧)进行图标绘制 感谢邵旭东(个人主页)提供的备案域名 感谢lxfly2000(Github)进行的程序协助 感谢塔林狐(酷安)进行编写 FAQ 感谢虚影无华(哔哩哔哩动画)制作的 星之卡比100%计划 系列视频 感谢梦想卡比(百度贴吧)进行早期版本测试 感谢oxsm9(百度贴吧)的 红米2A 感谢更多我应该感谢但记不住名字及人以及感谢我的父母]]></content>
      <categories>
        <category>我的 Android 应用</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[记一些 Hexo 报错]]></title>
    <url>%2Fposts%2Fb36c6159%2F</url>
    <content type="text"><![CDATA[说在前面：这里主要是记一下平时在 Hexo 遇到的报错，解决之后分享一下解决方法 YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 6, column 1:解决方法：查看新建要上传地md文件，看看 tags 那里或者其他地方，与后面内容是不是有一个空格。我是排查空格之后就解决了。好智障啊]]></content>
      <categories>
        <category>技术记录</category>
      </categories>
      <tags>
        <tag>踩坑</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我为什么要搭建博客]]></title>
    <url>%2Fposts%2Fa6366ad5%2F</url>
    <content type="text"><![CDATA[即使最后没有人为你鼓掌，也要优雅地谢幕，感谢自己的认真付出。 我觉得自建博客＋个人域名是树立个人品牌的一个重要步骤，试想别人通过搜索到你的个人网站并联系你的时候，说明个人品牌已经初步建立了。 但如果仅仅把它形容为「进入现在行业的敲门砖与踏脚石」，这个说法也是不够算是完整的。社交网站、写作平台都是别人的，你拥有的是写的权利跟一个 Profile 页面，写出来的文档都不属于你，而是平台的，这太讽刺了。你获得多少关注不一定直接跟你的写作内容有关，吸引的读者更多是跟平台有关而不是个人有关。 每次打开博客会有种莫名有种归属感。城市太闹，微博太糟，幸好还有一个没人知晓的博客，在不愿让人知道的那天，任由自己的情绪倾倒。我想这就是博客存在的意义吧。 博客是你的，哪怕它再破落，访问量再低，狗不嫌家穷。只要你不放弃，到你八十三岁的时候，他仍然会在那里。从这个角度，它承载了记录的功能，它是你人生经历在时间上的痕迹，你可能说 印象笔记 也可以，但凭心而论「我宁愿相信 Hexo 活得会比前者（印象笔记）更久」，因为一切重平台的产品都会因为各种复杂的原因消失殆尽。即便 Hexo 停止更新，我也仍然可以搭一个环境让它跑起来，文章都在你身边存放着，它只是一个开源程序，让大家有写作的乐趣。 除了记录，独立博客就是“你”，你选择什么域名，使用什么主题，多大的字号，全文输出还是截断输出，使用哪家 Feed 托管，你也许会在 Feed 尾部用插件加上一朵小菊花，你甚至可以推荐一款你喜欢的同性恋应用给大家而不用担心被删除。 这就是我想要表达的，「这一切都是因为你，同时也呈现你」，它是一个专属于你自己的写作、记录、呈现的地方。它叫博客，但又不只是博客，以前在其他平台写博客是为了很多东西，现在自己搭建写博客只是为了一种生活习惯，少论道，多说常识跟生活。 这大概就是我对于个人搭建博客的看法了，也是为什么我要去搭建博客。]]></content>
      <categories>
        <category>随手记</category>
      </categories>
      <tags>
        <tag>为什么</tag>
        <tag>看法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[偶然间在B站看到的鬼畜]]></title>
    <url>%2Fposts%2Fd46d4e39%2F</url>
    <content type="text"><![CDATA[刚才逛B站的时候在首页偶然看到这个，播放量还挺高的，就点进去看看了。神级填词，现在的老哥们简直神了，真的容易引起共鸣，然后又想起了以前的一些事，诶。 不多说啥了，做好现在的自己，不偏离本心！ 视频地址：https://www.bilibili.com/video/av60731116/ 贴一个里面的评论曾经看到大学宿舍里的沙雕图片，一个光膀大汉法相庄严，后面的人伸出手摆成千手佛陀，下面有句热评： “珍惜现在的时光吧，能陪你一起沙雕的朋友已经越来越少了。” 欢乐是如何消失的呢，海绵宝宝？ 当你变成正常人、长大的时候，它就和你告了别。 我喜欢什么都不做，喜欢追求最天真的快乐。闭眼数数和我一般如星星闪耀的天才，可是只有我一个派大星。知道我找到了另一颗星星，你，海绵宝宝。愿意和我一起享受快乐。我不知道为什么他们说我是废物。我不知道为什么太阳西边是落处。我不知道为什么章鱼哥追求艺术。我不知道为什么蟹老板攒钱如土。即便抽不中想要的角色，我们却有辆小汽车。即便驾照总是触不可及，我们也能玩摇摇乐。即便去抓水母邻居遭殃，我们还在享受快乐。当人们追求自己喜欢的东西的时候，为什么你渐行渐远了呢。即便你有喜爱的工作、支持你的朋友、爱你的家人、听话的小窝和大把的青春值得去奋斗，我却发现你不再快乐，生病了。你说想要变回常人。你说羡慕章鱼哥受人景仰。你说羡慕蟹老板家财万贯。你说抓水母让章鱼哥愤怒。你说想要的角色难以抽到。你说不考驾照快乐受了限。我最好的朋友，你这样我也很难受。当我看到那电章鱼哥的水母，我一定要抓到。当我再去商场终于抽到角色，你一直想要的。当我考来驾照坐上那小汽车，想和你去冒险。于是我带着这些再次找到你。直到见到你漂亮的房子。见到你成团的宾客。见到你光鲜的衣服。见到你贵气的打扮。听到你说我嫉妒新生活的话语。感受到被丢出去的失落。 欢乐是如何消失的呢，海绵宝宝？]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
      <tags>
        <tag>视频</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一些 WordPress 主题]]></title>
    <url>%2Fposts%2Fdc790cfc%2F</url>
    <content type="text"><![CDATA[一些 WordPress 主题，好像都是来自吾爱破解，在这里记录一下 1. bethemehttps://www.52pojie.cn/thread-590043-1-1.html 2. Begin知更鸟https://www.52pojie.cn/thread-664527-1-1.html 3. DUXhttps://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=832427 4. XIUhttps://www.52pojie.cn/thread-705661-1-1.html]]></content>
      <categories>
        <category>资源</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows 软件推荐]]></title>
    <url>%2Fposts%2Fcd1c3d2a%2F</url>
    <content type="text"><![CDATA[这些软件都是我自己用过的，可以通过左边页面快速定位 1. Visual Studio Code这个简直首推，编辑利器，人生苦短，我用 VS Code 完成关于文本编辑工作的一切。它天生支持几乎所有编程语言，还可以通过扩展个性化相应的语法高亮等。如果你想忙里偷闲，VS Code 强大的扩展能力还能让你用它刷 LeetCode 或 V2EX，可谓带薪划水必备。你可以在官网免费获取 Visual Studio Code。 2. 福昕 PDF 阅读器国产，中文界面，流畅好用，界面美观点这里 3. 福昕 PDF 编辑器福昕（Foxit）可能是我国最受欢迎的 PDF 阅读器，由其出品的 PDF 编辑器 也是 Adobe Acrobat 的有力竞争对手。它提供了各种 PDF 批注工具；支持编辑 PDF 中的文本、段落、图片；设计并填写表单；OCR 识别图片中的文字；管理 PDF 页面；转换为其它文件格式等，界面也比较友好。 4. 火绒安全软件如果你觉得 Windows Defender 还是有些简陋，火绒安全软件是个不错的选择。它提供了病毒联网查杀、垃圾清理、下载保护、浏览器保护等国产卫士标配功能，但不会拖家带口向你问好，还你一片清净。除了系统防护外，火绒安全软件还提供了数种实用工具，如弹窗拦截、右键菜单管理、启动项管理、文件粉碎机等。如果你是进阶用户，还可以试试火绒剑这一强大的专业安全分析工具。你可以在 官网 免费获取火绒安全软件。 5. Quicklook，仿MAC快速预览MAC的快速预览很多人都见过，回望Win10的“预览”，依旧被抠抠唆唆地安排在窗口右侧，一点也不大气！QuickLook是一款仿MAC快速预览的小工具，装好之后，只要选中文件，按下键盘上的空格键，即可预览文件内容。 QuickLook支持文本、视频、音频、图片、压缩包、Office文档……，换句话说，你电脑上任何一款文件几乎都可以用它预览。同时你也可以点击预览窗右上角的按钮直接启动对应程序，非常方便。QuickLook：点此下载 6. 升级Win10日历！优效日历Win10为右下角托盘设计了一个新日历，但依旧被吐槽功能太弱，优效日历是Win10原生日历的最佳替代者。它有着和Win10原生日历一致的外观界面，支持农历、节日、调休显示，支持日程提醒、万年历、自定义时钟。同时它还集成了定时关机、屏幕截图两大功能，没用过的一定得试一试！点击下载 7. ChocolateyChocolatey是Windows下的包管理器，访问官网来查看使用方法 8. uToolsuTools是一个极简的桌面管理软件，但它的功能更全面。包含：快速启动、自动识别、数据同步等功能。 比如快速启动，这个功能和Listary、Everything等都非常相似。但uTools对中文的支持非常有好，还可以首字母检索。除此外还有插件中心，里面还有各种比如：网页快开、在线翻译、计算器、压缩图片、图片转文字等功能。这也是其它快速启动软件所不具备的。点击下载 9. 万彩办公大师万彩办公大师可以说是一个办公必备的工具，包含了各种功能：PDF编辑、格式转换、图片编辑等，功能多达60+。 最让人惊喜的是，万彩办公大师使用完全免费，所有的工具无需安装，直接加载就可以启动了。下载地址 10. TreeSizeTreeSize 是一个扫描磁盘可视化排列大小的应用，有免费版和专业版可以选点击这里获取免费版 11. CCleanerccleaner，不仅是常用的垃圾和缓存清理，我也用它在电脑刚到手时卸载掉win10自带的各种无用软件（有些Windows不让卸载的自带uwp，在ccleaner里可以卸载掉），甚至我嫌onedrive麻烦，也用它卸载过。界面很友好。批量卸载比手动卸载方便不少。软件是有中文的，但默认是英文，自己手动在options-setting-language选择Chinese simplified即可点击下载 12. BandiZipBandiZip，界面美观，功能强大，而且免费无广告，另外7-Zip，界面丑了一些，功能还是很强的。也有不少人推荐修改版的rar烈火或者好压，其实都不错。下载地址 13. Obs-Open Broadcaster Softwareobs，不用多说了，剪视频、录游戏好帮手。下载地址 14. VLC media player跨平台的播放器，Linux的时候一直用的，Windows也就接着用了，有浏览器插件，可以直接把浏览器的视频推过来播放点这里下载 15. Geek UninstallerGeek Uninstaller 是一个专业卸载软件，采取深而快的扫描方式，删除所有无用的文件，注册表，卸载无残留！这款软件也是一款单文件软件，下载后，不用安装，双击直接使用，卸载软件、强制彻底清除软件残留垃圾文件或是查看某软件的注册表项目等等。你可以在他的官网获取到 未完后面想到了再补充]]></content>
      <categories>
        <category>资源</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>软件推荐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次 WordPress 搭建与宝塔面板配置]]></title>
    <url>%2Fposts%2F75f0fab2%2F</url>
    <content type="text"><![CDATA[WordPress 可能是比较好用的博客系统了，当然改一下做个非博客应该也可以。当然是需要服务器的，想我这种用 Hexo 配合 Github Page 当然是用不起的了，不过前段时间帮朋友搞了一下，就在这里记录一下过程了 1. 准备1.1 选择服务器首先服务器用的是阿里云的轻量应用服务器，因为比较便宜，点击这里可以查看价格和配置。当然这里就不测试了，因为价格在这里摆着，还要什么自行车。 1.2下载 WordPress 文件访问https://cn.wordpress.org/download/然后点击下载到你能方便找到的地方就好了 2. 系统和面板然后我选择的是 CentOS 然后装的宝塔面板，点击查看宝塔的面板，免费版也够用 3. SSH到服务器3.1 开启端口看这个页面即可https://www.bt.cn/bbs/thread-19376-1-1.html推荐打开所有端口，因为宝塔面板也有防火墙 3.2 SSH 配置首先要到轻量应用服务器的控制面板然后点击你的服务器点进去后再转到远程连接选择这里任何一种都可以，没有任何影响那么我这里是用的第三种，也就是用账号密码来连接。 3.3 SSH 客户端因为用账号密码的话，是要用本地客户端连接的，那么这里推荐使用FinalShel来连接，国人制作，有免费版本，中文界面，支持 Windows,macOS,Linux点金网址后选择你系统对应的链接就可以下载了 下载安装后打开就可以看到界面了 然后点击这个按钮然后点击就可以添加一个连接了 在这里输入服务器的名字，ip，用户名，密码，然后保存再双击刚才添加的就可以连接了 4. 安装面板安装很简单，一行命令就搞定了 1yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh 如果是 Ubuntu 用这个命令 1wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh Debian 系统的用这个 1wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; bash install.sh Fedora 系统用这个 1wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh 怎么样，是不是很简单，后面都是自动化的安装了。当然我只使用过 CentOS，所以下面的还用 CentOS举例 安装完毕后会有一段提示，里面有访问面板的地址和默认的用户名还有密码，当然随后都可以改 5. 登录面板进入面板登录后会选择安装一些东西，这里推荐使用编译安装，虽然费时间但是很稳定。现在，喝杯咖啡看看书，或者小睡一会儿，这个过程可能需要3-4个小时 6. 解析域名现在，你的面板应该已经部署好了，那下一步就是解析域名了，这里假设你已经完成了域名的更改，我使用的是腾讯云提供的解析服务演示，当然阿里云或者其他服务商也会有。访问https://console.cloud.tencent.com/cns登录腾讯云配置解析 6.1 绑定域名点击添加域名然后输入你的域名，比如输入 ljbaidu.com 当然这个要填你的域名，我只是吐槽一下百度然后点击确定就可以了 6.2 配置DNS添加域名后如果解析状态提示异常的话就可能是 DNS 的问题，需要去注册商哪里讲 DNS 修改为 12f1g1ns1.dnspod.netf1g1ns2.dnspod.net 然后等待最多72小时就可以了 6.3添加解析看到这里说明你的 DNS 已经没问题了，现在点击操作栏的解析，进去之后点击上面的添加记录。主机记录选择 @ 这一项就可以了，记录类型选择 A ，记录值填入你的服务器IP最后点击保存，稍作等待，这个过程需要十分钟才能生效当然如果你是氪金用户当我没说 7正式开始部署 WordPress7.1添加站点现在登录你的宝塔面板，在侧边栏找到网站，点击后选择添加站点然后这样填再次声明，ljbaidu.com只是调侃，请填写自己的域名然后点击提交 7.2添加数据库然后选择侧边栏的数据库，然后选择添加数据库填写数据库名称，用户名和密码，选择访问权限然后选择提交，如图(注意看箭头所指的选项) 7.3修改 WordPress 配置解压刚开始下载的 wordpress-5.2.2.zip ，然后解压到一个文件夹中。找到 wp-config-sample.php 并重命名为 wp-config.php ，然后使用文本编辑器或其他打开 wp-config.php。找到 123456789101112131415161718// ** MySQL settings - You can get this info from your web host ** ///** The name of the database for WordPress */define( 'DB_NAME', 'database_name_here' );/** MySQL database username */define( 'DB_USER', 'username_here' );/** MySQL database password */define( 'DB_PASSWORD', 'password_here' );/** MySQL hostname */define( 'DB_HOST', 'localhost' );/** Database Charset to use in creating database tables. */define( 'DB_CHARSET', 'utf8' );/** The Database Collate type. Don't change this if in doubt. */define( 'DB_COLLATE', '' ); 修改为 123456789101112131415161718// ** MySQL settings - You can get this info from your web host ** ///** The name of the database for WordPress */define( 'DB_NAME', 'wordpress' );//这里填入刚才创建数据库时数据库名称/** MySQL database username */define( 'DB_USER', 'wordpress' );//这里填入刚才创建数据库时的用户名/** MySQL database password */define( 'DB_PASSWORD', 'password' );//这里填入刚才创建数据库时的密码/** MySQL hostname */define( 'DB_HOST', 'localhost' );//这个和下面三个不做修改/** Database Charset to use in creating database tables. */define( 'DB_CHARSET', 'utf8' );/** The Database Collate type. Don't change this if in doubt. */define( 'DB_COLLATE', '' ); 保存文件并退出 返回上一目录，压缩这个文件夹 7.4上传 WordPress打开宝塔面板，选择网站点击根目录那一栏下面的文字，也就是然后选择上传，再点击选择文件，然后找到刚才打包的文件点击开始上传，等待即可 7.5解压点击这个选项，然后直接确定即可解压 现在访问 你的域名/wp-admin/install.php 就可以开始安装了，比如 http://ljbaidu.com/wp-admin/install.php 再次，我没有这个域名，所以下来用我的域名做演示 访问之后可以看到这个界面根据图上的注释填写，然后点击就可以安装了 在这里点击Log In 在下一个页面登录即可 8. 结束至此，所有安装过程已经完成，现在就可以开始使用了 如果在安装过程中有什么问题可以通过博客主页的联系方式联系我，或者在下面留下你的评论]]></content>
      <categories>
        <category>技术记录</category>
      </categories>
      <tags>
        <tag>网站搭建</tag>
        <tag>WordPress</tag>
        <tag>宝塔面板</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何优雅的使用 Material Design 2]]></title>
    <url>%2Fposts%2F9cb48aa5%2F</url>
    <content type="text"><![CDATA[1. 简介Material Design 2 (下面简称 MD2 )已经发布了一段时间了，可是还有一些小伙伴不知道怎么迁移到 MD2 来，我也是查了不少资料才摸索出来的 2. AndroidX首先，需要迁移到 AndroidX 来，这个网上有很多教程了，AS 和 IDEA 也有相关的功能，这里就不赘述了 3. 修改主题然后，需要修改 styles.xml 中的内容了，修改你之前的主题为 1&lt;style name="AppTheme" parent="Theme.MaterialComponents.Light.NoActionBar"&gt;" 当然还有其他可选的 12345Theme.MaterialComponentsTheme.MaterialComponents.LightTheme.MaterialComponents.NoActionBarTheme.MaterialComponents.Light.NoActionBarTheme.MaterialComponents.Light.DarkActionBar 如果只想对 Material 组件生效那就用 12345Theme.MaterialComponents.BridgeTheme.MaterialComponents.Light.BridgeTheme.MaterialComponents.NoActionBar.BridgeTheme.MaterialComponents.Light.NoActionBar.BridgeTheme.MaterialComponents.Light.DarkActionBar.Bridge 仅仅是这一个操作就完成了大部分任务了，现在编译就可以看到一些新特性了不过肯定没有这么简单，所以这里来讲解一些坑 4. 开始踩坑4.1 FloatingActionButton颜色问题对，你没看错，MD2 默认的 FAB 颜色有一点问题默认情况下背景色不是主题的强调色，图标的颜色也是黑的，很丑，那么怎么解决呢？很简单，添加 12app:backgroundTint="?attr/colorAccent"app:tint="@android:color/white" 这两行到 FAB的属性，即 123456&lt;com.google.android.material.floatingactionbutton.FloatingActionButton android:layout_width="wrap_content" android:layout_height="wrap_content" android:id="@+id/fab_chat_edit" app:backgroundTint="?attr/colorAccent" app:tint="@android:color/white"/&gt; 这样就完成啦，背景色是主题的强调色，图标是白色，就和以前的一样了，当然也可以修改为其他的颜色 4.2布局的 Design 界面不能预览这个就比较麻烦了，好像只有第一次启动ide的时候能正常看到布局，过一会就无法预览了，提示异常，感觉是个bug，临时的解决办法就是修改主题，xml布局界面上边修改主题为旧版本的即可，这样改以后布局可以看，只是 material 的效果都没了，很难受 还有一种办法，参考 stackoverflow 比较简单的办法,添加一个预览的style 最后还有一种说是 Android Studio 3.5 修复了，不过我是 IDEA 就不太清楚了 5. 待续暂时遇到这些，后面还有的话也记录上来]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Material Design 2</tag>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kirby Assistant 1.x.x更新日志]]></title>
    <url>%2Fposts%2F12e7f5da%2F</url>
    <content type="text"><![CDATA[v1.4.5(48)1.修复登录时用户名不变的bug2.旧版本已经不能下载模拟器 请更新3.修复闲聊发送失败的问题 v1.4.4(47)1.根据 Material Design 2 重新调整的界面2.重新调整的配色3.贡献者名单更新 v1.4.3(46)1.优化apk体积2.优化图片显示3.bug修复 v1.4.2(45)1.修改游戏详情界面2.修正动画逻辑3.模拟器下载等等，最近没钱 v1.4.1(44)1.迁移AndroidX构建2.恢复除用户头像和模拟器下载的所有功能3.史诗级压缩4.修复切换视图时闪退的bug5.修复图标问题6.调整了图片显示大小 v1.4.0(43)1.重回2017 v1.3.9(42)1.替换下拉刷新为 Material Design 样式2.调整部分UI3.也许修复了bug v1.3.8(41)1.现在登录登出不会再重启app了2.现在修改头像也不会重启app了3.修改了底栏的效果 v1.3.7(40)1.新增Telegarm频道联系方式2.使用Shortcut特性3.统一了应用内部分图片风格4.移除无用资源5.修复了一个资源问题6.1儿童节快乐 v1.3.6(39)1.修复自适应图标2.修复闲聊保存机制3.使用新方法优化了所有数据结构4.闲聊部分界面重构5.优化列表动画6.优化进入游戏详情动画 v1.3.5(38)1.修复编辑闲聊时退出会进行保存的bug2.新增花里胡哨的列表，大部分图片模糊后作为背景3.重写游戏下载页面4.新的图标感谢@hk流星5.新的宣传图感谢@梁月信乃6.新的模糊逻辑，从在线模糊改为离线模糊(可能加大缓存大小但是减少流量损耗)7.修改部分动画效果8.大幅提升启动速度，至少缩减1500ms(1.5s)9.bang15便士10.修复可能存在的bug v1.3.4(37)1.调整闲聊列表配色2.修复编辑当前闲聊时不会自动填充的问题3.调整登录界面布局4.移除闲聊发送显示随机id v1.3.3(36)1.更改选择头像图片的逻辑2.修改部分界面配色3.FAQ部分修复 v1.3.2(35)1.修复白屏bug(测试性，不保证)2.迁移部分资源服务器3.修正支付宝捐赠逻辑 v1.3.1(34)1.修复无法更换头像的问题2.修复更新时标题栏有误的问题 v1.3.0(33)1.新增版权信息确认2.更正贡献者列表 保证每个贡献者都可以有一个页面访问3.修复部分资源无法访问的问题 v1.2.9(32)1.修改了包名重新上架2.修正了捐赠页面3.官网域名更新 请查看简介4.修复bug v1.2.8(31)1.更新贡献者列表2.修正了图标3.修复上下文获取异常问题4.修复无法检测更新问题 v1.2.7(30)1.[非]全新图标2.移除了双图标模式3.修订了部分翻译4.新增[极简模式]隐藏你不需要的5.修复部分资源无法访问的问题 v1.2.6(29)1.新增更新检测，有新版时会提醒更新2.FAQ修正，翻译版本尚在修复中3.英文翻译修正4.翻译中文翻译修正5.贡献者名单修正6.修复wii模拟器版本问题 v1.2.5(28)1.繁体中文翻译修正2.解决闲聊发送异常问题3.添加Android绿色应用公约标识 v1.2.4(27)1.史诗级压缩有木有2.移除了存储访问权限3.修复无法进入更换头像的bug4.重写头像剪裁5.繁体中文翻译修订6.更换关于为设置7.将切换图标移动到设置界面8.修订设置界面内容9.Kirby Assistant正在申请Android绿色应用公约10.使用了绿色公约的相关sdk v1.2.3(26)1.修复了金手指界面无法进入的问题2.修改了下拉刷新动画3.修复屏幕旋转后数据丢失问题 v1.2.2(25)1.修复部分手机无法启动的问题2.移除启动界面动画 v1.2.1(24)本周，kirby AssistantAssistant迎来了重大版本更新，请务必更新，否则在旧版本中无法正常使用一些功能，快来看看吧:1.重写闲聊2.迁移服务器，旧版本将无法访问3.重写底层，优化性能，解决历史遗留问题4.抱歉各位丢失了闲聊数据5.字符串修订6.使用PBF7.主界面切换动画修改 v1.2(23)本周，Kirby Assistant迎来了重大版本更新，快来看看吧:1.优化了启动动画，现在更顺畅了2.更换了头像占位图3.更换了发送闲聊等界面的点击效果4.移除了双图标在启动界面显示5.更换了权限申请逻辑6.重写了统计逻辑7.修订了大部分翻译8.修复需要为非简体中文，繁体中文，英文时的应用名错乱问题9.修复了需要切换无效的问题10.圣诞快乐 v1.1(22)本周，Kirby Assistant迎来了小版本迭代更新，快来看看吧:1.优化所有主题配色2.移除引起bug的暗色3.新增配色 灵感来源自虚无4.闲聊提醒优化5.资源界面重写6.翻译修订 v1.0(21)未来·炫动 重大版本更新1.全新启动界面动画2.全新列表加载动画3.全新刷新动画4.全新律动动画5.全新切换动画6.微调下载游戏UI7.全新模糊图算法8.新增统计SDK(不会收集您的隐私数据)9.更换图标切换逻辑10.Pie适配性11.捐赠逻辑修改12.底栏切换界面逻辑修改 防止在同一个界面重载13.所有动画全部精心设计 保证赏心悦目14.资源名称修订15.翻译修订16.资源链接修复17.模拟器下载修复18.金手指个别代码修复19.视频修订20.slogan修订]]></content>
      <categories>
        <category>我的 Android 应用</category>
      </categories>
      <tags>
        <tag>Kirby Assistant</tag>
        <tag>更新日志</tag>
      </tags>
  </entry>
</search>
